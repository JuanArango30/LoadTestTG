const puppeteer = require('puppeteer');
const fs = require('fs');

const URL = 'https://p68q6qtp-8501.use2.devtunnels.ms/';
const PREGUNTAS = [
  '¬øCu√°ntos cr√©ditos tiene la resoluci√≥n 047?',
  '¬øQue es el PEP?',
  '¬øQue es la matricula academica?',
  'Que es un bajo rendimiento acad√©mico?',
  '¬øQue es una habilitaci√≥n?',
  '¬øQue es un examen de suficiencia?',
  '¬øCuales son las modalidades de trabajo de grado de la facultad de ingenier√≠a?',
  '¬øQue es la matricula financiera?',
  '¬øQue es un cr√©dito acad√©mico?',
  '¬øQue es un curso electivo?',
  '¬øCuales materias se ven en el primer semestre de ingenier√≠a de sistemas?'
];
const CONCURRENCY = 2;
const TOTAL_USERS = 10;

let tiempos = [];

async function simulateUser(id) {
  const browser = await puppeteer.launch({ headless: false, args: ['--no-sandbox'] });
  const page = await browser.newPage();

  try {
    await page.goto(URL, { waitUntil: 'domcontentloaded', timeout: 0 });

    // Paso 1: Si existe bot√≥n de continuar, hacer clic
    try {
      await page.waitForSelector('#continue', { timeout: 8000 });
      await page.click('#continue');
      console.log(`Usuario ${id}: clic en 'Continuar'`);
    } catch (e) {
      console.log(`Usuario ${id}: bot√≥n 'Continuar' no fue necesario o no apareci√≥`);
    }

    // Paso 2: Esperar que se cargue el textarea
    await page.waitForSelector('textarea[data-testid="stChatInputTextArea"]', { timeout: 30000 });

    // Paso 3: Escribir la pregunta
    const preguntaAleatoria = PREGUNTAS[Math.floor(Math.random() * PREGUNTAS.length)];
    await page.type('textarea[data-testid="stChatInputTextArea"]', preguntaAleatoria);

    // Paso 4: Esperar que el bot√≥n de env√≠o est√© listo y hacer clic
    const buttonSelector = 'button[data-testid="stChatInputSubmitButton"]';
    await page.waitForSelector(buttonSelector, { visible: true});

    const startTime = performance.now();
    await page.click(buttonSelector);

    //Esperar hasta que aparezca el texto final
    await page.waitForFunction(() => {
      const elements = document.querySelectorAll('div');
      return Array.from(elements).some(el => el.innerText.includes("Tiempo de respuesta"));
    }, { timeout: 60000 });

    const endTime = performance.now();
    const responseTime = endTime - startTime;
    tiempos.push({id, responseTime});

    console.log(`‚úÖ Usuario ${id}: ${responseTime.toFixed(2)} ms`);

  } catch (err) {
    console.error(`‚ùå Usuario ${id} fall√≥: ${err.message}`);
  } finally {
    await browser.close();
  }
}

async function runLoadTest() {
  for (let i = 0; i < TOTAL_USERS; i += CONCURRENCY) {
    const batch = [];
    for (let j = 0; j < CONCURRENCY && i + j < TOTAL_USERS; j++) {
      batch.push(simulateUser(i + j + 1));
    }
    await Promise.all(batch);
    console.log(`--- Completados ${Math.min(i + CONCURRENCY, TOTAL_USERS)} usuarios ---`);
  }

  // Guardar resultados en CSV
  const csvLines = ['usuario,tiempo_ms'];
  for (const t of tiempos) {
    csvLines.push(`${t.id},${t.responseTime.toFixed(2)}`);
  }
  fs.writeFileSync('resultados.csv', csvLines.join('\n'));
  console.log('‚úÖ Archivo resultados.csv guardado con √©xito.');

  // Estad√≠sticas b√°sicas
  if (tiempos.length > 0) {
    const duraciones = tiempos.map(t => t.responseTime);
    const promedio = duraciones.reduce((a, b) => a + b, 0) / duraciones.length;
    const max = Math.max(...duraciones);
    const min = Math.min(...duraciones);
    console.log('\nüìä Resultados de la prueba de carga:');
    console.log(`Usuarios simulados: ${tiempos.length}`);
    console.log(`Tiempo promedio: ${promedio.toFixed(2)} ms`);
    console.log(`Tiempo m√≠nimo: ${min.toFixed(2)} ms`);
    console.log(`Tiempo m√°ximo: ${max.toFixed(2)} ms`);
  } else {
    console.log('No se pudieron medir tiempos.');
  }
}



runLoadTest();
